
C:/Users/ngocp/OneDrive/Documents/Github/ECE3610/lab03/simple_program.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:

.text                       
.global     _start          
.equ    STACK_BASE, 0x30000000
_start: 
        LDR     R1, =LED_BASE   /* Address of red LEDs. */
   0:	e59f108c 	ldr	r1, [pc, #140]	; 94 <BinaryDecoder+0x64>
        LDR     R2, =SW_BASE    /* Address of switches. */
   4:	e59f208c 	ldr	r2, [pc, #140]	; 98 <BinaryDecoder+0x68>
        LDR     R3, =HEX3_HEX0_BASE /* Address of the low four 7segment digits */ 
   8:	e59f308c 	ldr	r3, [pc, #140]	; 9c <BinaryDecoder+0x6c>
        LDR     R4, =HEX5_HEX4_BASE /* Address of the high two 7segment digits */
   c:	e59f408c 	ldr	r4, [pc, #140]	; a0 <BinaryDecoder+0x70>
        LDR     SP, =STACK_BASE
  10:	e3a0d203 	mov	sp, #805306368	; 0x30000000

00000014 <LOOP>:

LOOP:   
        LDRB    R5, [R2]        /* Read the state of switches, last 4 switches only, corresponding 0-9 */
  14:	e5d25000 	ldrb	r5, [r2]
        STMED   SP!, {R5, PC}   /* 1> push on the stack (in memory, hence "STM") the switch state, and return address */
  18:	e82d8020 	stmda	sp!, {r5, pc}
        B       BinaryDecoder
  1c:	ea000003 	b	30 <BinaryDecoder>
        @ LDR     R6, [SP,#4]!   /* 5> load to R6 the display pattern (same function as " LDMEA   SP!, {R6} ")*/
        LDMED   SP!, {R6}       /* 5> pop the 7-segment display pattern off the stack (to processor r6) */
  20:	e9bd0040 	ldmib	sp!, {r6}
        STR     R6, [R3]        /* 6> Display the state on 7segment. Whole 32-bit for HEX3_HEX0 */
  24:	e5836000 	str	r6, [r3]
        STR     R6, [R4]        /* 7> Display the state on 7segment. Whole 32-bit for HEX5_HEX4 */
  28:	e5846000 	str	r6, [r4]
        B       LOOP            
  2c:	eafffff8 	b	14 <LOOP>

00000030 <BinaryDecoder>:

BinaryDecoder:
        LDMED   SP!, {R5, R7}           /* 2> pop the switch value and return value off the stack (to processor at R5, R7) */
  30:	e9bd00a0 	ldmib	sp!, {r5, r7}

        CMP     R5, #0
  34:	e3550000 	cmp	r5, #0
        LDREQ   R6, =0x3F3F3F3F        /* 0b00111111 = 0x3F : displaying 0 */
  38:	059f6064 	ldreq	r6, [pc, #100]	; a4 <BinaryDecoder+0x74>

        CMP     R5, #1
  3c:	e3550001 	cmp	r5, #1
        LDREQ   R6, =0x06060606         /* 0b00000110 = 0x06 : displaying 1 */
  40:	059f6060 	ldreq	r6, [pc, #96]	; a8 <BinaryDecoder+0x78>

        CMP     R5, #2
  44:	e3550002 	cmp	r5, #2
        LDREQ   R6, =0x5B5B5B5B         /* 0b01011011 = 0x5B : displaying 2 */
  48:	059f605c 	ldreq	r6, [pc, #92]	; ac <BinaryDecoder+0x7c>

        CMP     R5, #3
  4c:	e3550003 	cmp	r5, #3
        LDREQ   R6, =0x4F4F4F4F         /* 0b01001111 = 0x4F : displaying 3 */
  50:	059f6058 	ldreq	r6, [pc, #88]	; b0 <BinaryDecoder+0x80>

        CMP     R5, #4
  54:	e3550004 	cmp	r5, #4
        LDREQ   R6, =0x66666666         /* 0b01100110 = 0x66 : displaying 4 */
  58:	059f6054 	ldreq	r6, [pc, #84]	; b4 <BinaryDecoder+0x84>

        CMP     R5, #5
  5c:	e3550005 	cmp	r5, #5
        LDREQ   R6, =0x6D6D6D6D         /* 0b01101101 = 0x6D : displaying 5 */
  60:	059f6050 	ldreq	r6, [pc, #80]	; b8 <BinaryDecoder+0x88>
        
        CMP     R5, #6
  64:	e3550006 	cmp	r5, #6
        LDREQ   R6, =0x7D7D7D7D         /* 0b01111101 = 0x7D : displaying 6 */
  68:	059f604c 	ldreq	r6, [pc, #76]	; bc <BinaryDecoder+0x8c>

        CMP     R5, #7
  6c:	e3550007 	cmp	r5, #7
        LDREQ   R6, =0x07070707         /* 0b00000111 = 0x07 : displaying 7 */
  70:	059f6048 	ldreq	r6, [pc, #72]	; c0 <BinaryDecoder+0x90>

        CMP     R5, #8
  74:	e3550008 	cmp	r5, #8
        LDREQ   R6, =0x7F7F7F7F         /* 0b01111111 = 0x7F : displaying 8 */
  78:	059f6044 	ldreq	r6, [pc, #68]	; c4 <BinaryDecoder+0x94>

        CMP     R5, #9                  
  7c:	e3550009 	cmp	r5, #9
        LDREQ   R6, =0x67676767         /* 0b01101111 = 0x67 :displaying 9 */
  80:	059f6040 	ldreq	r6, [pc, #64]	; c8 <BinaryDecoder+0x98>

        CMP     R5, #9                  /* any number greater than 9, subtract to 9 will be > 9, then displaying "-" for error */
  84:	e3550009 	cmp	r5, #9
        LDRGT   R6, =0x40404040         /* 0b01000000 = 0x40 : displaying - (dash) */     
  88:	c59f603c 	ldrgt	r6, [pc, #60]	; cc <BinaryDecoder+0x9c>

        STMED   SP!, {R6}            /* 3> push the 7-segment display pattern onto the stack */
  8c:	e82d0040 	stmda	sp!, {r6}
        MOV     PC, R7           /* 4> setting the program counter to the return address (exit subroutine) */
  90:	e1a0f007 	mov	pc, r7
  94:	ff200000 	.word	0xff200000
  98:	ff200040 	.word	0xff200040
  9c:	ff200020 	.word	0xff200020
  a0:	ff200030 	.word	0xff200030
  a4:	3f3f3f3f 	.word	0x3f3f3f3f
  a8:	06060606 	.word	0x06060606
  ac:	5b5b5b5b 	.word	0x5b5b5b5b
  b0:	4f4f4f4f 	.word	0x4f4f4f4f
  b4:	66666666 	.word	0x66666666
  b8:	6d6d6d6d 	.word	0x6d6d6d6d
  bc:	7d7d7d7d 	.word	0x7d7d7d7d
  c0:	07070707 	.word	0x07070707
  c4:	7f7f7f7f 	.word	0x7f7f7f7f
  c8:	67676767 	.word	0x67676767
  cc:	40404040 	.word	0x40404040
